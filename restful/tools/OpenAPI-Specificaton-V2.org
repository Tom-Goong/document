#+LATEX_HEADER: \usepackage{xltxtra}
#+LATEX_HEADER: \setmainfont{Songti SC}
#+LATEX_HEADER: \usepackage{seqsplit}
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil tasks:nil pri:nil title:t
#+TITLE: Open API Specification - V2.0
#+AUTHOR: Tom Goong
#+EMAIL: fall.for.you.ffm@gmail.com
* Preface
  本文档是官方文档的简要翻译([[http://swagger.io/specification/][官网]])([[https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md][Github]])，有任何错误请指正。
* Introductions
  Swagger是一个描述和记录restful api的一个项目，目前已经被捐献给apache软件基金会。
  Swagger规范定义了一些列文件用来描述接口。这些文件可以被swagger-ui展示，也可以用swagger-codegen来生成代码。
* Revision history
 | version |       date | notes                                      |
 |---------+------------+--------------------------------------------|
 |     3.0 |         ?? | next version                               |
 |     2.0 | 2014-09-08 | release of swagger 2.0                     |
 |     1.2 | 2014-03-14 | initial release of the formal document     |
 |     1.1 | 2012-08-22 | release of swagger 1.1                     |
 |     1.0 | 2011-08-10 | first release of the swagger specification |
* Definitions
** Path Templating
   路径模版使用{}符号表示url中可变的路径变量
** Mime Types
   mime类型定义媒体资源的表示形式，要求遵守[[https://tools.ietf.org/html/rfc6838][RFC 6838]]标准。例如如下定义
    - text/plain; charset=utf-8
    - application/json
    - application/vnd.github+json
    - application/vnd.github.v3+json
    - application/vnd.github.v3.raw+json
    - application/vnd.github.v3.text+json
    - application/vnd.github.v3.html+json
    - application/vnd.github.v3.full+json
    - application/vnd.github.v3.diff
    - application/vnd.github.v3.patch
** Http Status Codes
   http状态代表了操作执行的状态。所有可以使用的状态码在[[https://tools.ietf.org/html/rfc7231#section-6][RFC 7231]]和[[http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml][IANA Status Code Registry]]
* Specification
** Format
   Swagger规范文档同时支持json和yaml两种格式，大小写敏感。
#+BEGIN_SRC json
{
  "field" : [...]
}
#+END_SRC
    - Fixed Field: Swagger规范的关键字，域的名字固定，且只能出现规定次数
    - Patterned Filed: 域的名字不固定，可多次出现，但每次都有唯一的名字
** File Structure
   Swagger文档是用一个单一文件表示的，但部分定义可是使用不同文件，然后使用"$ref"来引用。
** Data Types
   Swagger文档支持的基本数据类型是依据json的一个草案标准([[http://json-schema.org/latest/json-schema-core.html#rfc.section.4.2][JSON-Schema Draft 4]])。除此之外还添加了一个“file”的基本数据类型，用来表示接口上传或下载的文件类型对象。
   | Common Name | Type    | Format    | Comments        |
   |-------------+---------+-----------+-----------------|
   | integer     | integer | int32     | signed 32 bits  |
   | long        | ingeger | int64     | signed 64 bits  |
   | float       | number  | float     |                 |
   | double      | number  | double    |                 |
   | string      | string  |           |                 |
   | byte        | string  | byte      | base64 编码字符 |
   | binary      | string  | binary    | 八进制序列      |
   | boolean     | boolean |           |                 |
   | date        | string  | date      | [[https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.htm][RFC 3339]]        |
   | dateTime    | string  | date-time | [[https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.htm][RFC 3339]]        |
   | password    | string  | password  |                 |
** Schema
*** Swagger Object
    Swagger API 声明文档中根目录的对象。
**** Fixed Fileds
     | Field Name          | Type                          | Description                                             |
     |---------------------+-------------------------------+---------------------------------------------------------|
     | swagger             | string                        | *[Required]* API标准的版本（目前必须为"2.0"）             |
     | info                | info Object                   | *[Required]* 描述API的元数据                              |
     | host                | string                        | domain或者IP，允许出现端口，但是不许出现path templating |
     | basePath            | string                        | 可以为空，不支持path templating                         |
     | schemes             | [string]                      | 使用的协议，http,https, ws,wss                                |
     | consumes            | [string]                      | 列举APIs能够处理的MIME类型，                            |
     | produces            | [string]                      | 列举APIs能够返回的所有MIME类型                          |
     | paths               | Paths Object                  | *[Required]* 接口地址                                     |
     | definitions         | Definitions Object            | 接口消费和生成的数据集合对象                            |
     | parameters          | Parameters Definitons Object  | 定义具体接口处理的参数对象                              |
     | responses           | Responses Definitions Object  | 定义具体接口返回的数据对象                              |
     | securityDefinitions | Security Definitions Object   | 定义规范中的安全认证方案                                |
     | security            | [Security Requirement Object] | 所有可选的安全认证方案(逻辑"OR"的关系)                  |
     | tags                | [Tag Object]                  | 添加额外的元数据                                        |
     | externalDocs        | External Documentation Object | 添加扩展的说明                                          |
**** Patterned Objects
     | Field Pattern | Type Description                                      |
     |---------------+-------------------------------------------------------|
     | ^x-           | Swagger允许存在扩展的节点，但要求必须使用"x-"作为前缀 |
*** Info Object
    这个对象描述了APIs的元数据信息。
**** Fixed Object
     | Field Name     | Type           | Description            |
     |----------------+----------------+------------------------|
     | title          | string         | *[Required]* 应用的标题名 |
     | description    | string         | 应用的简短说明         |
     | termsOfService | string         | 该APIs提供的服务的术语 |
     | contact        | Contact Object | APIs有关的联系信息     |
     | license        | License Object | 证书信息               |
     | version        | String         | *[Required]* APIs的版本  |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
  "title": "Swagger Sample App",
  "description": "This is a sample server Petstore server.",
  "termsOfService": "http://swagger.io/terms/",
  "contact": {
    "name": "API Support",
    "url": "http://www.swagger.io/support",
    "email": "support@swagger.io"
  },
  "license": {
    "name": "Apache 2.0",
    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
  },
  "version": "1.0.1"
}
#+END_SRC
#+BEGIN_SRC yaml
title: Swagger Sample App
description: This is a sample server Petstore server.
termsOfService: http://swagger.io/terms/
contact:
  name: API Support
  url: http://www.swagger.io/support
  email: support@swagger.io
license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.1
#+END_SRC
*** Contact Object
    APIs的联系信息
**** Fixed Fileds
     | Field Name | Type   | Description          |
     |------------+--------+----------------------|
     | name       | string | 人或者机构的名字     |
     | url        | string | 指向地址有联系人信息 |
     | email      | string | 联系人邮箱           |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
  "name": "API Support",
  "url": "http://www.swagger.io/support",
  "email": "support@swagger.io"
}
#+END_SRC
#+BEGIN_SRC yaml
name: API Support
url: http://www.swagger.io/support
email: support@swagger.io
#+END_SRC
*** License Object
    证书信息
**** Fixed Fields
     | Field Name | Type   | Description       |
     |------------+--------+-------------------|
     | name       | string | *[Required]* 证书名 |
     | url        | string |                   |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
  "name": "Apache 2.0",
  "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
}
#+END_SRC
#+BEGIN_SRC yaml
name: Apache 2.0
url: http://www.apache.org/licenses/LICENSE-2.0.html
#+END_SRC

*** Paths Object
    Paths对象描述了每一个endpoint的相对路径(这个path是紧接着basePath，组成了完整的URL)。
**** Patterned Fileds
     | Field Pattern | Type             | Description                                 |
     |---------------+------------------+---------------------------------------------|
     | /{path}       | Path Item Object | 描述endpoint的相对路径，允许Path templating |
     | ^x-           | Any              | 扩展信息                                    |
**** Example
#+BEGIN_SRC json
{
  "/pets": {
    "get": {
      "description": "Returns all pets from the system that the user has access to",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "A list of pets.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/pet"
            }
          }
        }
      }
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
/pets:
  get:
    description: Returns all pets from the system that the user has access to
    produces:
    - application/json
    responses:
      '200':
        description: A list of pets.
        schema:
          type: array
          items:
            $ref: '#/definitions/pet'
#+END_SRC
*** Path Item Object
    描述了一个path上的所有可以的操作。
**** Fixed Fileds
     | Field      | Type                                 | Descrition                                                 |
     |------------+--------------------------------------+------------------------------------------------------------|
     | $ref       | string                               | 引用一个外部定义的Path Item Object                         |
     | get        | Operation Object                     |                                                            |
     | put        | Operation Object                     |                                                            |
     | post       | Operation Object                     |                                                            |
     | delete     | Operation Object                     |                                                            |
     | options    | Operation Object                     |                                                            |
     | head       | Operation Object                     |                                                            |
     | patch      | Operation Object                     |                                                            |
     | parameters | [Parameter Object  Reference Object] | 定义当前path下的所有参数，但可以在具体操作定义下被覆盖定义 |
**** Patterned Fields
     同上
**** Example
#+BEGIN_SRC json
{
  "get": {
    "description": "Returns pets based on ID",
    "summary": "Find pets by ID",
    "operationId": "getPetsById",
    "produces": [
      "application/json",
      "text/html"
    ],
    "responses": {
      "200": {
        "description": "pet response",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pet"
          }
        }
      },
      "default": {
        "description": "error payload",
        "schema": {
          "$ref": "#/definitions/ErrorModel"
        }
      }
    }
  },
  "parameters": [
    {
      "name": "id",
      "in": "path",
      "description": "ID of pet to use",
      "required": true,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "csv"
    }
  ]
}
#+END_SRC
#+BEGIN_SRC yaml
get:
  description: Returns pets based on ID
  summary: Find pets by ID
  operationId: getPetsById
  produces:
  - application/json
  - text/html
  responses:
    '200':
      description: pet response
      schema:
        type: array
        items:
          $ref: '#/definitions/Pet'
    default:
      description: error payload
      schema:
        $ref: '#/definitions/ErrorModel'
parameters:
- name: id
  in: path
  description: ID of pet to use
  required: true
  type: array
  items:
    type: string
  collectionFormat: csv
#+END_SRC
*** Operation Object
    描述单个API的具体操作
**** Fixed Fileds
     | Field Name   | Type                                | Description                             |
     |--------------+-------------------------------------+-----------------------------------------|
     | tags         | [string]                            |                                         |
     | summary      | string                              | 最好不要超过120字符                     |
     | description  | string                              |                                         |
     | externalDocs | External Documentation Object       |                                         |
     | operationId  | string                              | 在整个API文档中唯一得描述当前操作       |
     | consumes     | [string]                            | 复写或清空全局定义                      |
     | produces     | [string]                            | 复写或清空全局定义                      |
     | parameters   | [Parameter Object, Reference Object | 当前操作的参数                          |
     | responses    | Responses Object                    | *[Required]* 列举当前操作的所有可能返回 |
     | schemes      | [string]                            |                                         |
     | deprecated   | boolean                             | 声明当前接口已被废弃                    |
     | security     | [Security Requirement Object]       |                                         |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
  "tags": [
    "pet"
  ],
  "summary": "Updates a pet in the store with form data",
  "description": "",
  "operationId": "updatePetWithForm",
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "parameters": [
    {
      "name": "petId",
      "in": "path",
      "description": "ID of pet that needs to be updated",
      "required": true,
      "type": "string"
    },
    {
      "name": "name",
      "in": "formData",
      "description": "Updated name of the pet",
      "required": false,
      "type": "string"
    },
    {
      "name": "status",
      "in": "formData",
      "description": "Updated status of the pet",
      "required": false,
      "type": "string"
    }
  ],
  "responses": {
    "200": {
      "description": "Pet updated."
    },
    "405": {
      "description": "Invalid input"
    }
  },
  "security": [
    {
      "petstore_auth": [
        "write:pets",
        "read:pets"
      ]
    }
  ]
}
#+END_SRC
#+BEGIN_SRC yaml
tags:
- pet
summary: Updates a pet in the store with form data
description: ""
operationId: updatePetWithForm
consumes:
- application/x-www-form-urlencoded
produces:
- application/json
- application/xml
parameters:
- name: petId
  in: path
  description: ID of pet that needs to be updated
  required: true
  type: string
- name: name
  in: formData
  description: Updated name of the pet
  required: false
  type: string
- name: status
  in: formData
  description: Updated status of the pet
  required: false
  type: string
responses:
  '200':
    description: Pet updated.
  '405':
    description: Invalid input
security:
- petstore_auth:
  - write:pets
  - read:pets
#+END_SRC

*** External Documentation Object
    引用外部资源来进行扩展描述
**** Fixed Fields
     | Field Name  | Type   | Descrition               |
     |-------------+--------+--------------------------|
     | description | string | 被引入资源文档的简单描述 |
     | url         | string | *[Required]* URL地址       |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
  "description": "Find more info here",
  "url": "https://swagger.io"
}
#+END_SRC
#+BEGIN_SRC yaml
description: Find more info here
url: https://swagger.io
#+END_SRC
*** Parameter Object
    具体描述一个操作参数。通过名字和地址(Field:"in")确定唯一的操作参数。
    以下列举允许的操作类型
    | Parameter Type | Discription                                                      |
    |----------------+------------------------------------------------------------------|
    | Path           | 使用Path Templating, 不包含host和baePath                         |
    | Query          | 出现在URL尾部，使用“?”分割                                     |
    | Header         | 自定义Headers也是请求的一部分                                    |
    | Body           | Body与Form Parameter不能同时出现在一个HTTP Request中             |
    | Form           | (application/x-www-form-urlencoded; multipart/form-data)[[https://www.w3.org/TR/html401/interact/forms.html#h-17.13.4][(Detail)]] |
**** Fixed Fields
     | Field Name  | Type    | Description  |
     |-------------+---------+--------------|
     | name        | string  | *[Requied]*  |
     | in          | string  | *[Requied]*  |
     | description | string  | 简短描述     |
     | required    | boolean | 是否强制包含 |

     如果"in"是"body"
     | Field Name | Type          | Description                   |
     |------------+---------------+-------------------------------|
     | schema     | Schema Object | *[Required]* 定义实体参数类型 |

     如果"in"是任何其它非"body"类型
     | Field Name       | Type         | Description                                        |
     |------------------+--------------+----------------------------------------------------|
     | type             | string       | *[Required]*                                       |
     | format           | string       | MIME Type                                          |
     | allowEmptyValue  | boolean      | 是否允许为空                                       |
     | items            | Items Object | *['Required' if 'type' is 'Array']* 列举一些元素   |
     | collectionFormat | string       | 数组表示格式:csv(default), ssv, tsv, piples, multi |
     | deafult          | *            | 定义服务器设置的默认值                             |
     | maximum          | number       | 最大值([[http://json-schema.org/latest/json-schema-validation.html][JSON Schema Validation]])                     |
     | exclusiveMaximum | boolean      | 定义允许值是否包含"最大值"(临界值的包含问题)       |
     | minimum          | boolean      |                                                    |
     | exclusiveMinimum | boolean      |                                                    |
     | maxLength        | integer      |                                                    |
     | minlength        | integer      |                                                    |
     | pattern          | string       | 正则匹配(比如邮箱，手机号等)                       |
     | maxItems         | integer      |                                                    |
     | minItems         | integer      |                                                    |
     | uniqueItems      | integer      |                                                    |
     | enum             | [*]          | 任意类型数组，但数组内元素必须唯一                 |
     | multipleOf       | number       |                                                    |
**** Patterned Objects
     同上
**** Example
***** 实体参数：
#+BEGIN_SRC json
{
  "name": "user",
  "in": "body",
  "description": "user to add to the system",
  "required": true,
  "schema": {
    "$ref": "#/definitions/User"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
name: user
in: body
description: user to add to the system
required: true
schema:
  $ref: '#/definitions/User'
#+END_SRC
#+BEGIN_SRC json
{
  "name": "user",
  "in": "body",
  "description": "user to add to the system",
  "required": true,
  "schema": {
    "type": "array",
    "items": {
      "type": "string"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
name: user
in: body
description: user to add to the system
required: true
schema:
  type: array
  items:
    type: string
#+END_SRC
***** 头部参数
#+BEGIN_SRC json
{
  "name": "token",
  "in": "header",
  "description": "token to be passed as a header",
  "required": true,
  "type": "array",
  "items": {
    "type": "integer",
    "format": "int64"
  },
  "collectionFormat": "csv"
}
#+END_SRC
#+BEGIN_SRC yaml
name: token
in: header
description: token to be passed as a header
required: true
type: array
items:
  type: integer
  format: int64
collectionFormat: csv
#+END_SRC
***** 路径参数
#+BEGIN_SRC json
{
  "name": "username",
  "in": "path",
  "description": "username to fetch",
  "required": true,
  "type": "string"
}
#+END_SRC
#+BEGIN_SRC yaml
name: username
in: path
description: username to fetch
required: true
type: string
#+END_SRC
***** 查询参数
#+BEGIN_SRC json
{
  "name": "id",
  "in": "query",
  "description": "ID of the object to fetch",
  "required": false,
  "type": "array",
  "items": {
    "type": "string"
  },
  "collectionFormat": "multi"
}
#+END_SRC
#+BEGIN_SRC yaml
name: id
in: query
description: ID of the object to fetch
required: false
type: array
items:
  type: string
collectionFormat: multi
#+END_SRC
***** Form Data 文件
#+BEGIN_SRC json
{
  "name": "avatar",
  "in": "formData",
  "description": "The avatar of the user",
  "required": true,
  "type": "file"
}
#+END_SRC
#+BEGIN_SRC yaml
name: avatar
in: formData
description: The avatar of the user
required: true
type: file
#+END_SRC
*** Items Object
    JSON规约的元素的子集，使用在位置不在'body'的参数定义
**** Fixed Fields
     | Field Name       | Type         | Description                                      |
     |------------------+--------------+--------------------------------------------------|
     | type             | string       | *[Required]* string,number,integer,boolean,array |
     | format           | string       | 具体见[Date Types]                               |
     | items            | Items Object | *[Required if type is "Array"]*     列举一些值   |
     | collectionFormat | string       | csv(default),ssv,tsv,pipes                       |
     | default          | *            | 定义服务器默认值                                 |
     | maximum          | number       | 同[Parameter Object]处的说明(以下一样)           |
     | exclusiveMaximum | boolean      |                                                  |
     | minimum          | number       |                                                  |
     | exclusiveMinimum | boolean      |                                                  |
     | maxLength        | integer      |                                                  |
     | pattern          | string       |                                                  |
     | maxItems         | integer      |                                                  |
     | minItems         | integer      |                                                  |
     | uniqueItems      | boolean      |                                                  |
     | enum             | [*]          |                                                  |
     | multipleOf       | number       |                                                  |
**** Patterned Objects
     同上
**** Example
#+BEGIN_SRC json
{
    "type": "string",
    "minLength": 2
}
#+END_SRC
#+BEGIN_SRC yaml
type: string
minLength: 2
#+END_SRC
#+BEGIN_SRC json
{
    "type": "array",
    "items": {
        "type": "integer",
        "minimum": 0,
        "maximum": 63
    }
}
#+END_SRC
#+BEGIN_SRC yaml
type: array
items:
  type: integer
  minimum: 0
  maximum: 63
#+END_SRC
*** Responses Object
    覆盖接口所有的正常返回以及一些已知的错误。
**** Fixed Fields
     | Field Name | Type                              | Description |
     |------------+-----------------------------------+-------------|
     | default    | Response Object, Reference Object |             |
**** Patterned Objects
     | Filed Pattern      | Type                              | Description |
     |--------------------+-----------------------------------+-------------|
     | {HTTP Status Code} | Response Object, Reference Object |             |
**** Example
#+BEGIN_SRC json
{
  "200": {
    "description": "a pet to be returned",
    "schema": {
      "$ref": "#/definitions/Pet"
    }
  },
  "default": {
    "description": "Unexpected error",
    "schema": {
      "$ref": "#/definitions/ErrorModel"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
'200':
  description: a pet to be returned
  schema:
    $ref: '#/definitions/Pet'
default:
  description: Unexpected error
  schema:
    $ref: '#/definitions/ErrorModel'
#+END_SRC
*** Response Object
    具体描述接口的一个返回结果。
**** Fixed Fields
     | Field Name  | Type           | Description                                    |
     |-------------+----------------+------------------------------------------------|
     | description | string         | *[Required]* 简短的说明                        |
     | schema      | Schema Object  | 返回实体的结构(基本数据类型、数组、对象或文件) |
     | headers     | Herders Object | 返回响应中的头信息列表                         |
     | examples    | Example Object | 返回信息的样例                                        |
**** Patterned Objects
     同扩展字段
**** Example
***** 数组复杂类型
#+BEGIN_SRC json
{
  "description": "A complex object array response",
  "schema": {
    "type": "array",
    "items": {
      "$ref": "#/definitions/VeryComplexType"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
description: A complex object array response
schema:
  type: array
  items:
    $ref: '#/definitions/VeryComplexType'
#+END_SRC
***** string类型
#+BEGIN_SRC json
{
  "description": "A simple string response",
  "schema": {
    "type": "string"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
description: A simple string response
schema:
  type: string
#+END_SRC
***** 带Headers的返回体
#+BEGIN_SRC json
{
  "description": "A simple string response",
  "schema": {
    "type": "string"
  },
  "headers": {
    "X-Rate-Limit-Limit": {
      "description": "The number of allowed requests in the current period",
      "type": "integer"
    },
    "X-Rate-Limit-Remaining": {
      "description": "The number of remaining requests in the current period",
      "type": "integer"
    },
    "X-Rate-Limit-Reset": {
      "description": "The number of seconds left in the current period",
      "type": "integer"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
description: A simple string response
schema:
  type: string
headers:
  X-Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    type: integer
  X-Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    type: integer
  X-Rate-Limit-Reset:
    description: The number of seconds left in the current period
    type: integer
#+END_SRC
***** 无值返回
#+BEGIN_SRC json
{
  "description": "object created"
}
#+END_SRC
#+BEGIN_SRC yaml
description: object created
#+END_SRC
*** Headers Object
    列举了一个响应中的所有headers。
**** Patterned Objects
     | Field Pattern | Type          | Description |
     |---------------+---------------+-------------|
     | {name}        | Header Object | Header的名字 |
**** Example
     *说明：自定义的Header不需要使用"X-"作为前缀，这个约定已经被后来的约定取消掉了*
#+BEGIN_SRC json
{
    "X-Rate-Limit-Limit": {
        "description": "The number of allowed requests in the current period",
        "type": "integer"
    },
    "X-Rate-Limit-Remaining": {
        "description": "The number of remaining requests in the current period",
        "type": "integer"
    },
    "X-Rate-Limit-Reset": {
        "description": "The number of seconds left in the current period",
        "type": "integer"
    }
}
#+END_SRC
#+BEGIN_SRC yaml
X-Rate-Limit-Limit:
  description: The number of allowed requests in the current period
  type: integer
X-Rate-Limit-Remaining:
  description: The number of remaining requests in the current period
  type: integer
X-Rate-Limit-Reset:
  description: The number of seconds left in the current period
  type: integer
#+END_SRC
*** Example Object
    用来在返回体描述中，共享的素材。
**** Patterned Objects
     | Filed Pattern | Type | Description                                |
     |---------------+------+--------------------------------------------|
     | {MIME type}   | Any  | 名字必须是接口能够返回(produces)的数据类型 |
**** Example
#+BEGIN_SRC json
{
  "application/json": {
    "name": "Puma",
    "type": "Dog",
    "color": "Black",
    "gender": "Female",
    "breed": "Mixed"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
application/json:
  name: Puma
  type: Dog
  color: Black
  gender: Female
  breed: Mixed
#+END_SRC
*** Header Object
**** Fixed Fields
     | Field Name       | Type        | Description                                      |
     |------------------+-------------+--------------------------------------------------|
     | description      | string      | 简短的描述                                       |
     | type             | string      | *[Required]* string,number,inteer,boolean, array |
     | format           | string      | 具体看[Data Types]                               |
     | item             | Item Object | *[Required if type is array]* 描述数组的元素     |
     | collectionFormat | string      | csv(default),ssv,tsv,pipes                       |
     | default          | *           | 定义服务器默认值                                 |
     | maximum          | number      | [同上面的说明]                                   |
     | exclusiveMaximum | boolean     |                                                  |
     | minimum          | number      |                                                  |
     | exclusiveMinimum | boolean     |                                                  |
     | maxLength        | integer     |                                                  |
     | minLength        | integer     |                                                  |
     | pattern          | string      |                                                  |
     | maxItems         | integer     |                                                  |
     | minItems         | integer     |                                                  |
     | uniqueItems      | boolean     |                                                  |
     | enum             | [*]         |                                                  |
     | multipleOf       | number      |                                                  |
**** Patterned Objects
     扩展字段
**** Example
#+BEGIN_SRC json
{
  "description": "The number of allowed requests in the current period",
  "type": "integer"
}
#+END_SRC
#+BEGIN_SRC yaml
description: The number of allowed requests in the current period
type: integer
#+END_SRC
*** Tag Object
**** Fixed Fields
     | Field Name   | Type                          | Description  |
     |--------------+-------------------------------+--------------|
     | name         | string                        | *[Required]* |
     | description  | string                        | 简短的描述   |
     | externalDocs | External Documentation Object | 引用外部文档 |
**** Patterned Objects
     扩展字段
**** Example
#+BEGIN_SRC json
{
    "name": "pet",
    "description": "Pets operations"
}
#+END_SRC
#+BEGIN_SRC yaml
name: pet
description: Pets operations
#+END_SRC
*** Reference Object
    文档中，在根级目录下申明一些对象，然后可以使用Reference Object来引用。
**** Fixed Fields
     | Field Name | Type   | Description  |
     |------------+--------+--------------|
     | $ref       | string | *[Required]* 被已用的元素 |
**** Example
***** 引用对象
#+BEGIN_SRC json
{
    "$ref": "#/definitions/Pet"
}
#+END_SRC
#+BEGIN_SRC yaml
$ref: '#/definitions/Pet'
#+END_SRC
***** 引用整个文件
#+BEGIN_SRC json
{
  "$ref": "Pet.json"
}
#+END_SRC
#+BEGIN_SRC yaml
$ref: 'Pet.yaml'
#+END_SRC
***** 引用文件的节点
#+BEGIN_SRC json
{
  "$ref": "definitions.json#/Pet"
}
#+END_SRC
#+BEGIN_SRC yaml
$ref: 'definitions.yaml#/Pet'
#+END_SRC
*** Schema Object
    模式对象，定义对象的结构。用以表示输入和输出对象的结构。可以是对象，基本数据类型或数组。
    参考资料：
    - [[http://json-schema.org/][JSON Schema Sprcification Draft 4]]
    - [[http://json-schema.org/latest/json-schema-core.html][JSON Schema Core]]
    - [[http://json-schema.org/latest/json-schema-validation.html][JSON Schema Validation]]
**** Fixed Fields
     | Field Name    | Type                          | Description |
     |---------------+-------------------------------+-------------|
     | discriminator | string                        |             |
     | readOnly      | boolean                       |             |
     | xml           | XML Object                    |             |
     | externalDocs  | External Documentation Object |             |
     | example       | Any                           |             |
**** Patterned Objects
**** Example
***** 基本数据类型
#+BEGIN_SRC json
{
    "type": "string",
    "format": "email"
}
#+END_SRC
#+BEGIN_SRC yaml
type: string
format: email
#+END_SRC
***** 简单模型对象
#+BEGIN_SRC json
{
  "type": "object",
  "required": [
    "name"
  ],
  "properties": {
    "name": {
      "type": "string"
    },
    "address": {
      "$ref": "#/definitions/Address"
    },
    "age": {
      "type": "integer",
      "format": "int32",
      "minimum": 0
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
type: object
required:
- name
properties:
  name:
    type: string
  address:
    $ref: '#/definitions/Address'
  age:
    type: integer
    format: int32
    minimum: 0
#+END_SRC
***** 有Map或字典结构的模型对象
#+BEGIN_SRC json
{
  "type": "object",
  "additionalProperties": {
    "type": "string"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
type: object
additionalProperties:
  type: string
#+END_SRC
#+BEGIN_SRC json
{
  "type": "object",
  "additionalProperties": {
    "$ref": "#/definitions/ComplexModel"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
type: object
additionalProperties:
  $ref: '#/definitions/ComplexModel'
#+END_SRC
***** 带有例子的模型对象
#+BEGIN_SRC json
{
  "type": "object",
  "properties": {
    "id": {
      "type": "integer",
      "format": "int64"
    },
    "name": {
      "type": "string"
    }
  },
  "required": [
    "name"
  ],
  "example": {
    "name": "Puma",
    "id": 1
  }
}
#+END_SRC
#+BEGIN_SRC yaml
type: object
properties:
  id:
    type: integer
    format: int64
  name:
    type: string
required:
- name
example:
  name: Puma
  id: 1
#+END_SRC
***** 组合对象的模型对象
#+BEGIN_SRC json
{
  "definitions": {
    "ErrorModel": {
      "type": "object",
      "required": [
        "message",
        "code"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "minimum": 100,
          "maximum": 600
        }
      }
    },
    "ExtendedErrorModel": {
      "allOf": [
        {
          "$ref": "#/definitions/ErrorModel"
        },
        {
          "type": "object",
          "required": [
            "rootCause"
          ],
          "properties": {
            "rootCause": {
              "type": "string"
            }
          }
        }
      ]
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
definitions:
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: integer
        minimum: 100
        maximum: 600
  ExtendedErrorModel:
    allOf:
    - $ref: '#/definitions/ErrorModel'
    - type: object
      required:
      - rootCause
      properties:
        rootCause:
          type: string
#+END_SRC
***** 支持多态的模型对象
#+BEGIN_SRC json
{
  "definitions": {
    "Pet": {
      "type": "object",
      "discriminator": "petType",
      "properties": {
        "name": {
          "type": "string"
        },
        "petType": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "petType"
      ]
    },
    "Cat": {
      "description": "A representation of a cat",
      "allOf": [
        {
          "$ref": "#/definitions/Pet"
        },
        {
          "type": "object",
          "properties": {
            "huntingSkill": {
              "type": "string",
              "description": "The measured skill for hunting",
              "default": "lazy",
              "enum": [
                "clueless",
                "lazy",
                "adventurous",
                "aggressive"
              ]
            }
          },
          "required": [
            "huntingSkill"
          ]
        }
      ]
    },
    "Dog": {
      "description": "A representation of a dog",
      "allOf": [
        {
          "$ref": "#/definitions/Pet"
        },
        {
          "type": "object",
          "properties": {
            "packSize": {
              "type": "integer",
              "format": "int32",
              "description": "the size of the pack the dog is from",
              "default": 0,
              "minimum": 0
            }
          },
          "required": [
            "packSize"
          ]
        }
      ]
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
definitions:
  Pet:
    type: object
    discriminator: petType
    properties:
      name:
        type: string
      petType:
        type: string
    required:
    - name
    - petType
  Cat:
    description: A representation of a cat
    allOf:
    - $ref: '#/definitions/Pet'
    - type: object
      properties:
        huntingSkill:
          type: string
          description: The measured skill for hunting
          default: lazy
          enum:
          - clueless
          - lazy
          - adventurous
          - aggressive
      required:
      - huntingSkill
  Dog:
    description: A representation of a dog
    allOf:
    - $ref: '#/definitions/Pet'
    - type: object
      properties:
        packSize:
          type: integer
          format: int32
          description: the size of the pack the dog is from
          default: 0
          minimum: 0
      required:
      - packSize
#+END_SRC
*** XML Object
    我们不实用XML所以不做说明。有兴趣的参考[[http://swagger.io/specification/#xmlObject][这里]]
*** Definitions Object
    定义了一些可以被操作消费或者生成的数据对象。里面的数据可以是基本数据类型、数组或领域对象
**** Patterned  Fields
     | Field Patterned | Type          | Description    |
     |-----------------+---------------+----------------|
     | {name}          | Schema Object | 一个具体的对象 |
**** Example
#+BEGIN_SRC json
{
  "Category": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer",
        "format": "int64"
      },
      "name": {
        "type": "string"
      }
    }
  },
  "Tag": {
    "type": "object",
    "properties": {
      "id": {
        "type": "integer",
        "format": "int64"
      },
      "name": {
        "type": "string"
      }
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
Category:
  type: object
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
Tag:
  type: object
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
#+END_SRC
*** Parameters Definitions Object
    定义一些参数对象
**** Patterned Fields
     | Field Patterned | Type             | Description    |
     |-----------------+------------------+----------------|
     | {name}          | Parameter Object | 具体的参数对象 |
**** Example
#+BEGIN_SRC json
{
  "skipParam": {
    "name": "skip",
    "in": "query",
    "description": "number of items to skip",
    "required": true,
    "type": "integer",
    "format": "int32"
  },
  "limitParam": {
    "name": "limit",
    "in": "query",
    "description": "max records to return",
    "required": true,
    "type": "integer",
    "format": "int32"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
skipParam:
  name: skip
  in: query
  description: number of items to skip
  required: true
  type: integer
  format: int32
limitParam:
  name: limit
  in: query
  description: max records to return
  required: true
  type: integer
  format: int32
#+END_SRC

*** Responses Definitions Object
    定义返回数据对象
**** Patterned Fields
     | Field  Pattern | Type            | Description    |
     |----------------+-----------------+----------------|
     | {name}         | Response Object | 具体的返回对象 |
**** Example
#+BEGIN_SRC json
{
  "NotFound": {
    "description": "Entity not found."
  },
  "IllegalInput": {
    "description": "Illegal input for operation."
  },
  "GeneralError": {
    "description": "General Error",
    "schema": {
        "$ref": "#/definitions/GeneralError"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
NotFound:
  description: Entity not found.
IllegalInput:
  description: Illegal input for operation.
GeneralError:
  description: General Error
  schema:
    $ref: '#/definitions/GeneralError'
#+END_SRC
*** Seurity Definitions Object
    定义安全验证方案对象
**** Patterned Fields
     | Field Pattern | Type     | Description  |
     |---------------+----------+--------------|
     | {name}        | Security | 安全认证方案 |
**** Example
#+BEGIN_SRC json
{
  "api_key": {
    "type": "apiKey",
    "name": "api_key",
    "in": "header"
  },
  "petstore_auth": {
    "type": "oauth2",
    "authorizationUrl": "http://swagger.io/api/oauth/dialog",
    "flow": "implicit",
    "scopes": {
      "write:pets": "modify pets in your account",
      "read:pets": "read your pets"
    }
  }
}
#+END_SRC
#+BEGIN_SRC yaml
api_key:
  type: apiKey
  name: api_key
  in: header
petstore_auth:
  type: oauth2
  authorizationUrl: http://swagger.io/api/oauth/dialog
  flow: implicit
  scopes:
    write:pets: modify pets in your account
    read:pets: read your pets
#+END_SRC
*** Security Scheme Object
    定义接口使用的安全认证方案(basic authentication, API key, OAuth2)
**** Fixed Fields
     | Fixed Name       | Type          | Validity                                      | Description                                              |
     |------------------+---------------+-----------------------------------------------+----------------------------------------------------------|
     | type             | string        | Any                                           | *[Required]* basic, apiKey, Oauth2                       |
     | description      | string        | Any                                           |                                                          |
     | name             | string        | apiKey                                        | *[Required]*                                             |
     | in               | string        | apiKey                                        | *[Required]* query, header                               |
     | flow             | string        | oauth2                                        | *[Required]* implicit, password, application, accessCode |
     | authorizationUrl | string        | oauth2("implicit", "accessCode")              | *[Required]* URL格式的值                                 |
     | tokenUrl         | string        | oauth2("password","application","accessCode") | *[Required]* URL格式的值                                 |
     | scopes           | Scopes Object | oauth2                                        | *[Required]* OAuth2协议的scope值范围                     |
**** Patterned Objects
     扩展字段
**** Example
***** 基本鉴权
#+BEGIN_SRC json
{
  "type": "basic"
}
#+END_SRC
#+BEGIN_SRC yaml
type: basic
#+END_SRC
***** API Key 鉴权
#+BEGIN_SRC json
{
  "type": "apiKey",
  "name": "api_key",
  "in": "header"
}
#+END_SRC
#+BEGIN_SRC yaml
type: apiKey
name: api_key
in: header
#+END_SRC
***** OAuth2 鉴权
#+BEGIN_SRC json
{
  "type": "oauth2",
  "authorizationUrl": "http://swagger.io/api/oauth/dialog",
  "flow": "implicit",
  "scopes": {
    "write:pets": "modify pets in your account",
    "read:pets": "read your pets"
  }
}
#+END_SRC
#+BEGIN_SRC yaml
type: oauth2
authorizationUrl: http://swagger.io/api/oauth/dialog
flow: implicit
scopes:
  write:pets: modify pets in your account
  read:pets: read your pets
#+END_SRC
*** Scopes Object
    列举使用了OAuth2安全认证方案口的所有可以获取到的权限范围值。
**** Patterned Fields
     | Field Pattern | Type   | Description |
     |---------------+--------+-------------|
     | {name}        | string |             |
**** Example
#+BEGIN_SRC json
{
  "write:pets": "modify pets in your account",
  "read:pets": "read your pets"
}
#+END_SRC
#+BEGIN_SRC yaml
write:pets: modify pets in your account
read:pets: read your pets
#+END_SRC
*** Security Requirement Object
    列举要执行一个操作中，必须满足的安全认证方案，当这个对象有多个值时，表示逻辑'AND'的意思。
    注：每个属性必须已经定义在Security Definitions中。
**** Patterned Fileds
     | Field Pattern | Type     | Description |
     |---------------+----------+-------------|
     | {name}        | [string] |             |
**** Example
***** 不需要OAuth2的安全认证
#+BEGIN_SRC json
{
  "api_key": []
}
#+END_SRC
#+BEGIN_SRC yaml
api_key: []
#+END_SRC
***** OAuth2安全认证
#+BEGIN_SRC json
{
  "petstore_auth": [
    "write:pets",
    "read:pets"
  ]
}
#+END_SRC
#+BEGIN_SRC yaml
petstore_auth:
- write:pets
- read:pets
#+END_SRC
** Specification Extensions
   Swagger的规范为了尽可能的囊括大部分的用例场景，在某些节点允许添加额外的信息来扩展规范。扩展的属性总是用'x-'作为前缀。
** Security Filtering
   Swagger规范中，有些对象虽然可能是API规范的核心，但是允许为空，甚至直接被移除，这个是为了做访问控制。（能访问页面，标识地址没有错误，但是看不到某些接口）
